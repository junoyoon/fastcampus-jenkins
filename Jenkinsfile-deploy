pipeline {
    // 어떠한 에이전트에서도 실행 가능함을 표현
    agent any

    options {
        // 빌드를 5개만 유지
        buildDiscarder logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '5', numToKeepStr: '5')
        // 실제 소스 코드는 불필요 하므로 checkout skip
        skipDefaultCheckout()
    }


    parameters {
        booleanParam defaultValue: false, description: '정말 배포를 하실건가요?', name: 'ARE_YOU_SURE'
        buildSelector defaultSelector: upstream(fallbackToLastSuccessful: true), description: '배포할 pipeline-build 빌드', name: 'BUILD_SELECTOR'
    }


    // stages > stage > steps 순으로 구성
    stages {
        stage("Checking Deployment") {
            when {
                environment name: 'ARE_YOU_SURE', value: 'false'
            }
            steps {
                error('Executed mistakenly.')
            }
        }

        stage('Copying from upstream.') {
            steps {
                copyArtifacts filter: 'projects/spring-app/build/libs/*', fingerprintArtifacts: true, flatten: true, projectName: 'pipeline-build', selector: buildParameter('BUILD_SELECTOR'), target: 'deploy'
            }
        }

        stage('Send to target') {
            steps {
                echo "Send to target"
            }
        }
    }


    // post 는 stage 마다 실행시킬 수도 있고, 전체가 stages가 완료된 다음에 실행 시킬 수도 있음
    /*
    post {
        always {
        }
        success {
        }
    }
    */
}
